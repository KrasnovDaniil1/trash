{"ast":null,"code":"import { ROUND_CREATE_REQUESTED, ROUND_CREATE_LOADED, ROUND_CREATE_FAILURE, FIGHTS_REQUESTED, CURRENT_FIGHT_REQUESTED } from \"../constants/action-types\";\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string';\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL;\nexport default function* watcherSaga() {\n  yield takeLatest(ROUND_CREATE_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    console.log(action);\n    const payload = yield call(getData, action.fightId, action.number);\n    const data = payload.data;\n\n    if (payload && payload.status == 201) {\n      yield all([put({\n        type: ROUND_CREATE_LOADED,\n        data\n      }), put({\n        type: CURRENT_FIGHT_REQUESTED\n      })]);\n    } else {\n      yield put({\n        type: ROUND_CREATE_FAILURE,\n        data\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: ROUND_CREATE_FAILURE,\n      error\n    });\n    console.log(error);\n  }\n}\n\nfunction getData(fightId, number) {\n  const url = '/rounds';\n  return axios(`${api_root}${url}`, {\n    method: \"post\",\n    withCredentials: true,\n    data: {\n      fight_id: fightId,\n      number: number\n    }\n  });\n}","map":{"version":3,"sources":["/home/daniil/Работа по програмированию/tournament-admin/src/sagas/AddRoundSaga.js"],"names":["ROUND_CREATE_REQUESTED","ROUND_CREATE_LOADED","ROUND_CREATE_FAILURE","FIGHTS_REQUESTED","CURRENT_FIGHT_REQUESTED","takeEvery","call","put","takeLatest","all","queryString","axios","api_root","process","env","REACT_APP_API_URL","watcherSaga","workerSaga","action","console","log","payload","getData","fightId","number","data","status","type","error","url","method","withCredentials","fight_id"],"mappings":"AAAA,SACEA,sBADF,EAEEC,mBAFF,EAGEC,oBAHF,EAIEC,gBAJF,EAKEC,uBALF,QAMO,2BANP;AAQA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA7B;AAEA,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAMR,UAAU,CAACR,sBAAD,EAAyBiB,UAAzB,CAAhB;AACD;;AAED,UAAUA,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAMG,OAAO,GAAG,MAAMf,IAAI,CAACgB,OAAD,EACxBJ,MAAM,CAACK,OADiB,EACRL,MAAM,CAACM,MADC,CAA1B;AAGA,UAAMC,IAAI,GAAGJ,OAAO,CAACI,IAArB;;AACA,QAAIJ,OAAO,IAAIA,OAAO,CAACK,MAAR,IAAkB,GAAjC,EAAsC;AACpC,YAAMjB,GAAG,CAAC,CACRF,GAAG,CAAC;AAAEoB,QAAAA,IAAI,EAAE1B,mBAAR;AAA6BwB,QAAAA;AAA7B,OAAD,CADK,EAERlB,GAAG,CAAC;AAAEoB,QAAAA,IAAI,EAAEvB;AAAR,OAAD,CAFK,CAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMG,GAAG,CAAC;AAAEoB,QAAAA,IAAI,EAAEzB,oBAAR;AAA8BuB,QAAAA;AAA9B,OAAD,CAAT;AACD;AACF,GAdD,CAcE,OAAOG,KAAP,EAAc;AACd,UAAMrB,GAAG,CAAC;AAAEoB,MAAAA,IAAI,EAAEzB,oBAAR;AAA8B0B,MAAAA;AAA9B,KAAD,CAAT;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD;AACF;;AAED,SAASN,OAAT,CACEC,OADF,EAEEC,MAFF,EAGE;AACA,QAAMK,GAAG,GAAG,SAAZ;AACA,SAAOlB,KAAK,CAAE,GAAEC,QAAS,GAAEiB,GAAI,EAAnB,EAAsB;AAChCC,IAAAA,MAAM,EAAE,MADwB;AAChBC,IAAAA,eAAe,EAAE,IADD;AACON,IAAAA,IAAI,EAAE;AAC3CO,MAAAA,QAAQ,EAAET,OADiC;AAE3CC,MAAAA,MAAM,EAAEA;AAFmC;AADb,GAAtB,CAAZ;AAMD","sourcesContent":["import {\n  ROUND_CREATE_REQUESTED,\n  ROUND_CREATE_LOADED,\n  ROUND_CREATE_FAILURE,\n  FIGHTS_REQUESTED,\n  CURRENT_FIGHT_REQUESTED\n} from \"../constants/action-types\";\n\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string'\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL\n\nexport default function* watcherSaga() {\n  yield takeLatest(ROUND_CREATE_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    console.log(action);\n    const payload = yield call(getData,\n      action.fightId, action.number\n    );\n    const data = payload.data;\n    if (payload && payload.status == 201) {\n      yield all([\n        put({ type: ROUND_CREATE_LOADED, data }),\n        put({ type: CURRENT_FIGHT_REQUESTED }),\n      ])\n    } else {\n      yield put({ type: ROUND_CREATE_FAILURE, data });\n    }\n  } catch (error) {\n    yield put({ type: ROUND_CREATE_FAILURE, error });\n    console.log(error);\n  }\n}\n\nfunction getData(\n  fightId,\n  number\n) {\n  const url = '/rounds';\n  return axios(`${api_root}${url}`, {\n    method: \"post\", withCredentials: true, data: {\n      fight_id: fightId,\n      number: number\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}