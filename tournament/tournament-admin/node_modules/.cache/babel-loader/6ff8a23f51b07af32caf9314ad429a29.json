{"ast":null,"code":"// я добавил\nimport { JUDGESATTACKVSPROTECTION // Я добавил\n, CREATEJUDGESATTACKVSPROTECTION // Я добавил\n\n/* FIGHTER_CREATE_REQUESTED,\n FIGHTER_CREATE_LOADED,\n FIGHTER_CREATE_FAILURE,\n FIGHTERS_REQUESTED*/\n} from \"../constants/action-types\";\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string';\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL;\nexport default function* watcherSaga() {\n  yield takeLatest(CREATEJUDGESATTACKVSPROTECTION, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  //try {\n  const payload = yield call(getData, action.judge_id, action.judge, action.fighter_id, action.fighter, action.action_type);\n  const data = payload.data;\n  /*if (payload && payload.status == 201) {\n    yield all([\n      put({ type: FIGHTER_CREATE_LOADED, data }),\n      put({ type: JUDGESATTACKVSPROTECTION })\n    ])\n  } else {\n    yield put({ type: FIGHTER_CREATE_FAILURE, data });\n  }\n  } catch (error) {\n  yield put({ type: FIGHTER_CREATE_FAILURE, error });\n  console.log(error);\n  }*/\n}\n\nfunction getData(judge_id, judge, fighter_id, fighter, action_type) {\n  const url = '/actionCreateCurrentFight';\n  return axios(`${api_root}${url}`, {\n    method: \"post\",\n    withCredentials: true,\n    data: {\n      judge_id: judge_id,\n      judge: judge,\n      fighter_id: fighter_id,\n      fighter: fighter,\n      action_type: action_type\n    }\n  });\n}","map":{"version":3,"sources":["/home/daniil/Работа по програмированию/tournament-admin/src/sagas/JudgesAttackVsProtection.js"],"names":["JUDGESATTACKVSPROTECTION","CREATEJUDGESATTACKVSPROTECTION","takeEvery","call","put","takeLatest","all","queryString","axios","api_root","process","env","REACT_APP_API_URL","watcherSaga","workerSaga","action","payload","getData","judge_id","judge","fighter_id","fighter","action_type","data","url","method","withCredentials"],"mappings":"AAAA;AACA,SACIA,wBADJ,CAC8B;AAD9B,EAEIC,8BAFJ,CAEqC;;AAClC;;;;AAHH,OAOS,2BAPT;AASE,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA7B;AAEA,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAMR,UAAU,CAACJ,8BAAD,EAAiCa,UAAjC,CAAhB;AACD;;AAED,UAAUA,UAAV,CAAqBC,MAArB,EAA6B;AAC3B;AACE,QAAMC,OAAO,GAAG,MAAMb,IAAI,CAACc,OAAD,EAAUF,MAAM,CAACG,QAAjB,EAA4BH,MAAM,CAACI,KAAnC,EAA2CJ,MAAM,CAACK,UAAlD,EAA+DL,MAAM,CAACM,OAAtE,EAAgFN,MAAM,CAACO,WAAvF,CAA1B;AACA,QAAMC,IAAI,GAAGP,OAAO,CAACO,IAArB;AACA;;;;;;;;;;;;AAYH;;AAED,SAASN,OAAT,CAAiBC,QAAjB,EAA4BC,KAA5B,EAAoCC,UAApC,EAAiDC,OAAjD,EAA2DC,WAA3D,EAAwE;AACtE,QAAME,GAAG,GAAG,2BAAZ;AACA,SAAOhB,KAAK,CAAE,GAAEC,QAAS,GAAEe,GAAI,EAAnB,EAAsB;AAChCC,IAAAA,MAAM,EAAE,MADwB;AAChBC,IAAAA,eAAe,EAAE,IADD;AACOH,IAAAA,IAAI,EAAE;AAC3CL,MAAAA,QAAQ,EAAGA,QADgC;AAE3CC,MAAAA,KAAK,EAAGA,KAFmC;AAG3CC,MAAAA,UAAU,EAAGA,UAH8B;AAI3CC,MAAAA,OAAO,EAAGA,OAJiC;AAK3CC,MAAAA,WAAW,EAAGA;AAL6B;AADb,GAAtB,CAAZ;AASD","sourcesContent":["// я добавил\nimport {\n    JUDGESATTACKVSPROTECTION ,// Я добавил\n    CREATEJUDGESATTACKVSPROTECTION , // Я добавил\n   /* FIGHTER_CREATE_REQUESTED,\n    FIGHTER_CREATE_LOADED,\n    FIGHTER_CREATE_FAILURE,\n    FIGHTERS_REQUESTED*/\n  } from \"../constants/action-types\";\n  \n  import { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\n  import queryString from 'query-string'\n  import axios from 'axios';\n  const api_root = process.env.REACT_APP_API_URL\n  \n  export default function* watcherSaga() {\n    yield takeLatest(CREATEJUDGESATTACKVSPROTECTION, workerSaga);\n  }\n  \n  function* workerSaga(action) {\n    //try {\n      const payload = yield call(getData, action.judge_id , action.judge , action.fighter_id , action.fighter , action.action_type);\n      const data = payload.data;\n      /*if (payload && payload.status == 201) {\n        yield all([\n          put({ type: FIGHTER_CREATE_LOADED, data }),\n          put({ type: JUDGESATTACKVSPROTECTION })\n        ])\n      } else {\n        yield put({ type: FIGHTER_CREATE_FAILURE, data });\n      }\n    } catch (error) {\n      yield put({ type: FIGHTER_CREATE_FAILURE, error });\n      console.log(error);\n    }*/\n  }\n  \n  function getData(judge_id , judge , fighter_id , fighter , action_type) {\n    const url = '/actionCreateCurrentFight';\n    return axios(`${api_root}${url}`, {\n      method: \"post\", withCredentials: true, data: {\n        judge_id : judge_id, \n        judge : judge,\n        fighter_id : fighter_id,\n        fighter : fighter,\n        action_type : action_type\n      }\n    })\n  }\n  "]},"metadata":{},"sourceType":"module"}