{"ast":null,"code":"import { FIGHT_REQUESTED, FIGHT_LOADED } from \"../constants/action-types\";\nimport { takeEvery, call, put, takeLatest } from \"redux-saga/effects\";\nimport queryString from 'query-string';\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL;\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHT_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData, action.id);\n    yield put({\n      type: FIGHT_LOADED,\n      payload\n    });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction getData(id) {\n  const url = '/fights/' + id;\n  return axios.get(`${api_root}${url}`).then(res => {\n    return res.data;\n  });\n}","map":{"version":3,"sources":["/home/daniil/Работа по програмированию/tournament-admin/src/sagas/FightSaga.js"],"names":["FIGHT_REQUESTED","FIGHT_LOADED","takeEvery","call","put","takeLatest","queryString","axios","api_root","process","env","REACT_APP_API_URL","watcherSaga","workerSaga","action","payload","getData","id","type","e","console","log","url","get","then","res","data"],"mappings":"AAAA,SACEA,eADF,EAEEC,YAFF,QAGO,2BAHP;AAKA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA7B;AAEA,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAMP,UAAU,CAACL,eAAD,EAAkBa,UAAlB,CAAhB;AACD;;AAED,UAAUA,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMZ,IAAI,CAACa,OAAD,EAAUF,MAAM,CAACG,EAAjB,CAA1B;AACA,UAAMb,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAEjB,YAAR;AAAsBc,MAAAA;AAAtB,KAAD,CAAT;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;;AAED,SAASH,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,QAAMK,GAAG,GAAG,aAAaL,EAAzB;AACA,SAAOV,KAAK,CAACgB,GAAN,CAAW,GAAEf,QAAS,GAAEc,GAAI,EAA5B,EAA+BE,IAA/B,CAAoCC,GAAG,IAAI;AAChD,WAAOA,GAAG,CAACC,IAAX;AACD,GAFM,CAAP;AAGD","sourcesContent":["import {\n  FIGHT_REQUESTED,\n  FIGHT_LOADED\n} from \"../constants/action-types\";\n\nimport { takeEvery, call, put, takeLatest } from \"redux-saga/effects\";\nimport queryString from 'query-string'\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL\n\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHT_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData, action.id);\n    yield put({ type: FIGHT_LOADED, payload });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction getData(id) {\n  const url = '/fights/' + id;\n  return axios.get(`${api_root}${url}`).then(res => {\n    return res.data\n  })\n}\n"]},"metadata":{},"sourceType":"module"}