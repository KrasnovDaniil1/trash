{"ast":null,"code":"import { FIGHT_CREATE_REQUESTED, FIGHT_CREATE_LOADED, FIGHT_CREATE_FAILURE, FIGHTS_REQUESTED } from \"../constants/action-types\";\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string';\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL;\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHT_CREATE_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData, action.fightRedId, action.fightBlueId, action.fightAttackJudge1, action.fightAttackJudge2, action.fightAttackJudge3, action.fightDefenceJudge1, action.fightDefenceJudge2, action.fightDefenceJudge3, action.fightMaxRounds, action.fightRoundDuration, action.fightAttackPointsForAction, action.fightDefencePointsForAction);\n    const data = payload.data;\n\n    if (payload && payload.status == 201) {\n      yield all([put({\n        type: FIGHT_CREATE_LOADED,\n        data\n      }), put({\n        type: FIGHTS_REQUESTED\n      })]);\n    } else {\n      yield put({\n        type: FIGHT_CREATE_FAILURE,\n        data\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: FIGHT_CREATE_FAILURE,\n      error\n    });\n    console.log(error);\n  }\n}\n\nfunction getData(fightRedId, fightBlueId, fightAttackJudge1, fightAttackJudge2, fightAttackJudge3, fightDefenceJudge1, fightDefenceJudge2, fightDefenceJudge3, fightMaxRounds, fightRoundDuration, fightAttackPointsForAction, fightDefencePointsForAction) {\n  const url = '/fights';\n  return axios(`${api_root}${url}`, {\n    method: \"post\",\n    withCredentials: true,\n    data: {\n      red_fighter_id: fightRedId,\n      blue_fighter_id: fightBlueId,\n      attack_judge_1_id: fightAttackJudge1,\n      attack_judge_2_id: fightAttackJudge2,\n      attack_judge_3_id: fightAttackJudge3,\n      defence_judge_1_id: fightDefenceJudge1,\n      defence_judge_2_id: fightDefenceJudge2,\n      defence_judge_3_id: fightDefenceJudge3,\n      max_rounds: parseInt(fightMaxRounds),\n      round_duration: parseInt(fightRoundDuration),\n      attack_points_for_action: parseInt(fightAttackPointsForAction),\n      defence_points_for_action: parseInt(fightDefencePointsForAction)\n    }\n  });\n}","map":{"version":3,"sources":["/home/daniil/Работа по програмированию/tournament-admin/src/sagas/AddFightSaga.js"],"names":["FIGHT_CREATE_REQUESTED","FIGHT_CREATE_LOADED","FIGHT_CREATE_FAILURE","FIGHTS_REQUESTED","takeEvery","call","put","takeLatest","all","queryString","axios","api_root","process","env","REACT_APP_API_URL","watcherSaga","workerSaga","action","payload","getData","fightRedId","fightBlueId","fightAttackJudge1","fightAttackJudge2","fightAttackJudge3","fightDefenceJudge1","fightDefenceJudge2","fightDefenceJudge3","fightMaxRounds","fightRoundDuration","fightAttackPointsForAction","fightDefencePointsForAction","data","status","type","error","console","log","url","method","withCredentials","red_fighter_id","blue_fighter_id","attack_judge_1_id","attack_judge_2_id","attack_judge_3_id","defence_judge_1_id","defence_judge_2_id","defence_judge_3_id","max_rounds","parseInt","round_duration","attack_points_for_action","defence_points_for_action"],"mappings":"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","sourcesContent":["import {\n  FIGHT_CREATE_REQUESTED,\n  FIGHT_CREATE_LOADED,\n  FIGHT_CREATE_FAILURE,\n  FIGHTS_REQUESTED\n} from \"../constants/action-types\";\n\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string'\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL\n\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHT_CREATE_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData,\n      action.fightRedId,\n      action.fightBlueId,\n      action.fightAttackJudge1,\n      action.fightAttackJudge2,\n      action.fightAttackJudge3,\n      action.fightDefenceJudge1,\n      action.fightDefenceJudge2,\n      action.fightDefenceJudge3,\n      action.fightMaxRounds,\n      action.fightRoundDuration,\n      action.fightAttackPointsForAction,\n      action.fightDefencePointsForAction\n    );\n    const data = payload.data;\n    if (payload && payload.status == 201) {\n      yield all([\n        put({ type: FIGHT_CREATE_LOADED, data }),\n        put({ type: FIGHTS_REQUESTED })\n      ])\n    } else {\n      yield put({ type: FIGHT_CREATE_FAILURE, data });\n    }\n  } catch (error) {\n    yield put({ type: FIGHT_CREATE_FAILURE, error });\n    console.log(error);\n  }\n}\n\nfunction getData(\n  fightRedId,\n  fightBlueId,\n  fightAttackJudge1,\n  fightAttackJudge2,\n  fightAttackJudge3,\n  fightDefenceJudge1,\n  fightDefenceJudge2,\n  fightDefenceJudge3,\n  fightMaxRounds,\n  fightRoundDuration,\n  fightAttackPointsForAction,\n  fightDefencePointsForAction\n) {\n  const url = '/fights';\n  return axios(`${api_root}${url}`, {\n    method: \"post\", withCredentials: true, data: {\n      red_fighter_id: fightRedId,\n      blue_fighter_id: fightBlueId,\n      attack_judge_1_id: fightAttackJudge1,\n      attack_judge_2_id: fightAttackJudge2,\n      attack_judge_3_id: fightAttackJudge3,\n      defence_judge_1_id: fightDefenceJudge1,\n      defence_judge_2_id: fightDefenceJudge2,\n      defence_judge_3_id: fightDefenceJudge3,\n      max_rounds: parseInt(fightMaxRounds),\n      round_duration: parseInt(fightRoundDuration),\n      attack_points_for_action: parseInt(fightAttackPointsForAction),\n      defence_points_for_action: parseInt(fightDefencePointsForAction)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}