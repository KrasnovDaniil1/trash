{"ast":null,"code":"import { FIGHT_START_REQUESTED, FIGHT_START_LOADED, FIGHT_START_FAILURE, FIGHTS_REQUESTED } from \"../constants/action-types\";\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string';\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL;\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHT_START_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData, action.id);\n    const data = payload.data;\n\n    if (payload) {\n      yield all([put({\n        type: FIGHT_START_LOADED,\n        data\n      }), put({\n        type: FIGHTS_REQUESTED\n      })]);\n    } else {\n      yield put({\n        type: FIGHT_START_FAILURE,\n        data\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: FIGHT_START_FAILURE,\n      error\n    });\n    console.log(error);\n  }\n}\n\nfunction getData(id) {\n  const url = '/fights/' + id + '/start';\n  return axios(`${api_root}${url}`, {\n    method: \"put\",\n    withCredentials: true\n  });\n}","map":{"version":3,"sources":["/home/daniil/Работа по програмированию/tournament-admin/src/sagas/StartFightSaga.js"],"names":["FIGHT_START_REQUESTED","FIGHT_START_LOADED","FIGHT_START_FAILURE","FIGHTS_REQUESTED","takeEvery","call","put","takeLatest","all","queryString","axios","api_root","process","env","REACT_APP_API_URL","watcherSaga","workerSaga","action","payload","getData","id","data","type","error","console","log","url","method","withCredentials"],"mappings":"AAAA,SACEA,qBADF,EAEEC,kBAFF,EAGEC,mBAHF,EAIEC,gBAJF,QAKO,2BALP;AAOA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA7B;AAEA,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAMR,UAAU,CAACP,qBAAD,EAAwBgB,UAAxB,CAAhB;AACD;;AAED,UAAUA,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMb,IAAI,CAACc,OAAD,EAAUF,MAAM,CAACG,EAAjB,CAA1B;AACA,UAAMC,IAAI,GAAGH,OAAO,CAACG,IAArB;;AACA,QAAIH,OAAJ,EAAa;AACX,YAAMV,GAAG,CAAC,CACRF,GAAG,CAAC;AAAEgB,QAAAA,IAAI,EAAErB,kBAAR;AAA4BoB,QAAAA;AAA5B,OAAD,CADK,EAERf,GAAG,CAAC;AAAEgB,QAAAA,IAAI,EAAEnB;AAAR,OAAD,CAFK,CAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMG,GAAG,CAAC;AAAEgB,QAAAA,IAAI,EAAEpB,mBAAR;AAA6BmB,QAAAA;AAA7B,OAAD,CAAT;AACD;AACF,GAXD,CAWE,OAAOE,KAAP,EAAc;AACd,UAAMjB,GAAG,CAAC;AAAEgB,MAAAA,IAAI,EAAEpB,mBAAR;AAA6BqB,MAAAA;AAA7B,KAAD,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,SAASJ,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,QAAMM,GAAG,GAAG,aAAaN,EAAb,GAAkB,QAA9B;AACA,SAAOV,KAAK,CAAE,GAAEC,QAAS,GAAEe,GAAI,EAAnB,EAAsB;AAChCC,IAAAA,MAAM,EAAE,KADwB;AACjBC,IAAAA,eAAe,EAAE;AADA,GAAtB,CAAZ;AAGD","sourcesContent":["import {\n  FIGHT_START_REQUESTED,\n  FIGHT_START_LOADED,\n  FIGHT_START_FAILURE,\n  FIGHTS_REQUESTED\n} from \"../constants/action-types\";\n\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string'\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL\n\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHT_START_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData, action.id);\n    const data = payload.data;\n    if (payload) {\n      yield all([\n        put({ type: FIGHT_START_LOADED, data }),\n        put({ type: FIGHTS_REQUESTED })\n      ])\n    } else {\n      yield put({ type: FIGHT_START_FAILURE, data });\n    }\n  } catch (error) {\n    yield put({ type: FIGHT_START_FAILURE, error });\n    console.log(error);\n  }\n}\n\nfunction getData(id) {\n  const url = '/fights/' + id + '/start';\n  return axios(`${api_root}${url}`, {\n    method: \"put\", withCredentials: true\n  })\n}\n"]},"metadata":{},"sourceType":"module"}