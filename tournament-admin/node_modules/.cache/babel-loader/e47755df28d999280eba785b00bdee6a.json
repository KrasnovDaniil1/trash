{"ast":null,"code":"import { FIGHTER_CREATE_REQUESTED, FIGHTER_CREATE_LOADED, FIGHTER_CREATE_FAILURE, FIGHTERS_REQUESTED } from \"../constants/action-types\";\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string';\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL;\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHTER_CREATE_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData, action.first_name, action.last_name);\n    const data = payload.data;\n\n    if (payload && payload.status == 201) {\n      yield all([put({\n        type: FIGHTER_CREATE_LOADED,\n        data\n      }), put({\n        type: FIGHTERS_REQUESTED\n      })]);\n    } else {\n      yield put({\n        type: FIGHTER_CREATE_FAILURE,\n        data\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: FIGHTER_CREATE_FAILURE,\n      error\n    });\n    console.log(error);\n  }\n}\n\nfunction getData(first_name, last_name) {\n  const url = '/fighters';\n  return axios(`${api_root}${url}`, {\n    method: \"post\",\n    withCredentials: true,\n    data: {\n      first_name: first_name,\n      last_name: last_name\n    }\n  });\n}","map":{"version":3,"sources":["/home/daniil/Работа по програмированию/tournament-admin/src/sagas/AddFighterSaga.js"],"names":["FIGHTER_CREATE_REQUESTED","FIGHTER_CREATE_LOADED","FIGHTER_CREATE_FAILURE","FIGHTERS_REQUESTED","takeEvery","call","put","takeLatest","all","queryString","axios","api_root","process","env","REACT_APP_API_URL","watcherSaga","workerSaga","action","payload","getData","first_name","last_name","data","status","type","error","console","log","url","method","withCredentials"],"mappings":"AAAA,SACEA,wBADF,EAEEC,qBAFF,EAGEC,sBAHF,EAIEC,kBAJF,QAKO,2BALP;AAOA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA7B;AAEA,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAMR,UAAU,CAACP,wBAAD,EAA2BgB,UAA3B,CAAhB;AACD;;AAED,UAAUA,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMb,IAAI,CAACc,OAAD,EAAUF,MAAM,CAACG,UAAjB,EAA6BH,MAAM,CAACI,SAApC,CAA1B;AACA,UAAMC,IAAI,GAAGJ,OAAO,CAACI,IAArB;;AACA,QAAIJ,OAAO,IAAIA,OAAO,CAACK,MAAR,IAAkB,GAAjC,EAAsC;AACpC,YAAMf,GAAG,CAAC,CACRF,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEvB,qBAAR;AAA+BqB,QAAAA;AAA/B,OAAD,CADK,EAERhB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAErB;AAAR,OAAD,CAFK,CAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMG,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEtB,sBAAR;AAAgCoB,QAAAA;AAAhC,OAAD,CAAT;AACD;AACF,GAXD,CAWE,OAAOG,KAAP,EAAc;AACd,UAAMnB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEtB,sBAAR;AAAgCuB,MAAAA;AAAhC,KAAD,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,SAASN,OAAT,CAAiBC,UAAjB,EAA6BC,SAA7B,EAAwC;AACtC,QAAMO,GAAG,GAAG,WAAZ;AACA,SAAOlB,KAAK,CAAE,GAAEC,QAAS,GAAEiB,GAAI,EAAnB,EAAsB;AAChCC,IAAAA,MAAM,EAAE,MADwB;AAChBC,IAAAA,eAAe,EAAE,IADD;AACOR,IAAAA,IAAI,EAAE;AAC3CF,MAAAA,UAAU,EAAEA,UAD+B;AAE3CC,MAAAA,SAAS,EAAEA;AAFgC;AADb,GAAtB,CAAZ;AAMD","sourcesContent":["import {\n  FIGHTER_CREATE_REQUESTED,\n  FIGHTER_CREATE_LOADED,\n  FIGHTER_CREATE_FAILURE,\n  FIGHTERS_REQUESTED\n} from \"../constants/action-types\";\n\nimport { takeEvery, call, put, takeLatest, all } from \"redux-saga/effects\";\nimport queryString from 'query-string'\nimport axios from 'axios';\nconst api_root = process.env.REACT_APP_API_URL\n\nexport default function* watcherSaga() {\n  yield takeLatest(FIGHTER_CREATE_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const payload = yield call(getData, action.first_name, action.last_name);\n    const data = payload.data;\n    if (payload && payload.status == 201) {\n      yield all([\n        put({ type: FIGHTER_CREATE_LOADED, data }),\n        put({ type: FIGHTERS_REQUESTED })\n      ])\n    } else {\n      yield put({ type: FIGHTER_CREATE_FAILURE, data });\n    }\n  } catch (error) {\n    yield put({ type: FIGHTER_CREATE_FAILURE, error });\n    console.log(error);\n  }\n}\n\nfunction getData(first_name, last_name) {\n  const url = '/fighters';\n  return axios(`${api_root}${url}`, {\n    method: \"post\", withCredentials: true, data: {\n      first_name: first_name,\n      last_name: last_name\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}